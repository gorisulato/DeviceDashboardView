//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HartamaViewDashboard.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Hartama_IOTEntities : DbContext
    {
        public Hartama_IOTEntities()
            : base("name=Hartama_IOTEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TAction> TActions { get; set; }
        public virtual DbSet<Options> Options { get; set; }
    
        public virtual int PInsertLog(string action, string tableLog, string iDTransaction, Nullable<System.DateTime> dateTransaction, string userTransaction, string oldValue, string newValue)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var tableLogParameter = tableLog != null ?
                new ObjectParameter("TableLog", tableLog) :
                new ObjectParameter("TableLog", typeof(string));
    
            var iDTransactionParameter = iDTransaction != null ?
                new ObjectParameter("IDTransaction", iDTransaction) :
                new ObjectParameter("IDTransaction", typeof(string));
    
            var dateTransactionParameter = dateTransaction.HasValue ?
                new ObjectParameter("DateTransaction", dateTransaction) :
                new ObjectParameter("DateTransaction", typeof(System.DateTime));
    
            var userTransactionParameter = userTransaction != null ?
                new ObjectParameter("UserTransaction", userTransaction) :
                new ObjectParameter("UserTransaction", typeof(string));
    
            var oldValueParameter = oldValue != null ?
                new ObjectParameter("OldValue", oldValue) :
                new ObjectParameter("OldValue", typeof(string));
    
            var newValueParameter = newValue != null ?
                new ObjectParameter("NewValue", newValue) :
                new ObjectParameter("NewValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PInsertLog", actionParameter, tableLogParameter, iDTransactionParameter, dateTransactionParameter, userTransactionParameter, oldValueParameter, newValueParameter);
        }
    
        public virtual int PTUserInsert(string userCode, string username, string password, string fullname, string email, Nullable<bool> locked, string iDRole, string userEntry, Nullable<System.DateTime> dateEntry, string site, byte[] userPicture, string employeeNo)
        {
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var fullnameParameter = fullname != null ?
                new ObjectParameter("Fullname", fullname) :
                new ObjectParameter("Fullname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var lockedParameter = locked.HasValue ?
                new ObjectParameter("Locked", locked) :
                new ObjectParameter("Locked", typeof(bool));
    
            var iDRoleParameter = iDRole != null ?
                new ObjectParameter("IDRole", iDRole) :
                new ObjectParameter("IDRole", typeof(string));
    
            var userEntryParameter = userEntry != null ?
                new ObjectParameter("UserEntry", userEntry) :
                new ObjectParameter("UserEntry", typeof(string));
    
            var dateEntryParameter = dateEntry.HasValue ?
                new ObjectParameter("DateEntry", dateEntry) :
                new ObjectParameter("DateEntry", typeof(System.DateTime));
    
            var siteParameter = site != null ?
                new ObjectParameter("site", site) :
                new ObjectParameter("site", typeof(string));
    
            var userPictureParameter = userPicture != null ?
                new ObjectParameter("userPicture", userPicture) :
                new ObjectParameter("userPicture", typeof(byte[]));
    
            var employeeNoParameter = employeeNo != null ?
                new ObjectParameter("employeeNo", employeeNo) :
                new ObjectParameter("employeeNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PTUserInsert", userCodeParameter, usernameParameter, passwordParameter, fullnameParameter, emailParameter, lockedParameter, iDRoleParameter, userEntryParameter, dateEntryParameter, siteParameter, userPictureParameter, employeeNoParameter);
        }
    
        public virtual ObjectResult<PTUserLogin_Result> PTUserLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTUserLogin_Result>("PTUserLogin", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<PTUserSelectByID_Result> PTUserSelectByID(string idUser)
        {
            var idUserParameter = idUser != null ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTUserSelectByID_Result>("PTUserSelectByID", idUserParameter);
        }
    
        public virtual ObjectResult<PTUserUpdate_Result> PTUserUpdate(string iDUser, string userCode, string username, string fullname, string email, byte[] userpicture, string iDRole, string employeeno, string userLastMaintanance)
        {
            var iDUserParameter = iDUser != null ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var fullnameParameter = fullname != null ?
                new ObjectParameter("Fullname", fullname) :
                new ObjectParameter("Fullname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userpictureParameter = userpicture != null ?
                new ObjectParameter("userpicture", userpicture) :
                new ObjectParameter("userpicture", typeof(byte[]));
    
            var iDRoleParameter = iDRole != null ?
                new ObjectParameter("IDRole", iDRole) :
                new ObjectParameter("IDRole", typeof(string));
    
            var employeenoParameter = employeeno != null ?
                new ObjectParameter("employeeno", employeeno) :
                new ObjectParameter("employeeno", typeof(string));
    
            var userLastMaintananceParameter = userLastMaintanance != null ?
                new ObjectParameter("UserLastMaintanance", userLastMaintanance) :
                new ObjectParameter("UserLastMaintanance", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTUserUpdate_Result>("PTUserUpdate", iDUserParameter, userCodeParameter, usernameParameter, fullnameParameter, emailParameter, userpictureParameter, iDRoleParameter, employeenoParameter, userLastMaintananceParameter);
        }
    
        public virtual ObjectResult<PTUserSelectByKeyword_Result> PTUserSelectByKeyword(string orderBy, string direction, string keyword)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTUserSelectByKeyword_Result>("PTUserSelectByKeyword", orderByParameter, directionParameter, keywordParameter);
        }
    
        public virtual ObjectResult<PTUserSelectALL_Result> PTUserSelectALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTUserSelectALL_Result>("PTUserSelectALL");
        }
    
        public virtual ObjectResult<PTUserDelete_Result> PTUserDelete(string iDUser, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iDUserParameter = iDUser != null ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTUserDelete_Result>("PTUserDelete", iDUserParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTUserUpdateLocked_Result> PTUserUpdateLocked(string iDUser, Nullable<bool> locked, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iDUserParameter = iDUser != null ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(string));
    
            var lockedParameter = locked.HasValue ?
                new ObjectParameter("Locked", locked) :
                new ObjectParameter("Locked", typeof(bool));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTUserUpdateLocked_Result>("PTUserUpdateLocked", iDUserParameter, lockedParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTUserUpdateResetPassword_Result> PTUserUpdateResetPassword(string iDUser, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance, Nullable<System.DateTime> lastPasswordChange)
        {
            var iDUserParameter = iDUser != null ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            var lastPasswordChangeParameter = lastPasswordChange.HasValue ?
                new ObjectParameter("LastPasswordChange", lastPasswordChange) :
                new ObjectParameter("LastPasswordChange", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTUserUpdateResetPassword_Result>("PTUserUpdateResetPassword", iDUserParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter, lastPasswordChangeParameter);
        }
    
        public virtual int PTUserUpdateLastLoginSite(string iDUser, string iDSite)
        {
            var iDUserParameter = iDUser != null ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(string));
    
            var iDSiteParameter = iDSite != null ?
                new ObjectParameter("IDSite", iDSite) :
                new ObjectParameter("IDSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PTUserUpdateLastLoginSite", iDUserParameter, iDSiteParameter);
        }
    
        public virtual int P_NumberSeri(string mODUL, string sPREFIX, Nullable<int> pANJANG, ObjectParameter nOMORSERI)
        {
            var mODULParameter = mODUL != null ?
                new ObjectParameter("MODUL", mODUL) :
                new ObjectParameter("MODUL", typeof(string));
    
            var sPREFIXParameter = sPREFIX != null ?
                new ObjectParameter("SPREFIX", sPREFIX) :
                new ObjectParameter("SPREFIX", typeof(string));
    
            var pANJANGParameter = pANJANG.HasValue ?
                new ObjectParameter("PANJANG", pANJANG) :
                new ObjectParameter("PANJANG", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_NumberSeri", mODULParameter, sPREFIXParameter, pANJANGParameter, nOMORSERI);
        }
    
        public virtual ObjectResult<PTSiteInsert_Result> PTSiteInsert(string siteName, string address, string postCode, string telephone, string fax, string email, string pIC, string userEntry, Nullable<System.DateTime> dateEntry, Nullable<bool> discontinue, string siteLogo, Nullable<int> iDTimeZone)
        {
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var postCodeParameter = postCode != null ?
                new ObjectParameter("PostCode", postCode) :
                new ObjectParameter("PostCode", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("telephone", telephone) :
                new ObjectParameter("telephone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var pICParameter = pIC != null ?
                new ObjectParameter("PIC", pIC) :
                new ObjectParameter("PIC", typeof(string));
    
            var userEntryParameter = userEntry != null ?
                new ObjectParameter("UserEntry", userEntry) :
                new ObjectParameter("UserEntry", typeof(string));
    
            var dateEntryParameter = dateEntry.HasValue ?
                new ObjectParameter("DateEntry", dateEntry) :
                new ObjectParameter("DateEntry", typeof(System.DateTime));
    
            var discontinueParameter = discontinue.HasValue ?
                new ObjectParameter("Discontinue", discontinue) :
                new ObjectParameter("Discontinue", typeof(bool));
    
            var siteLogoParameter = siteLogo != null ?
                new ObjectParameter("SiteLogo", siteLogo) :
                new ObjectParameter("SiteLogo", typeof(string));
    
            var iDTimeZoneParameter = iDTimeZone.HasValue ?
                new ObjectParameter("IDTimeZone", iDTimeZone) :
                new ObjectParameter("IDTimeZone", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTSiteInsert_Result>("PTSiteInsert", siteNameParameter, addressParameter, postCodeParameter, telephoneParameter, faxParameter, emailParameter, pICParameter, userEntryParameter, dateEntryParameter, discontinueParameter, siteLogoParameter, iDTimeZoneParameter);
        }
    
        public virtual ObjectResult<PTSiteUpdate_Result> PTSiteUpdate(string iDSite, string siteName, string address, string postCode, string telephone, string fax, string email, string pIC, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance, Nullable<bool> discontinue, string siteLogo, Nullable<int> iDTimeZone)
        {
            var iDSiteParameter = iDSite != null ?
                new ObjectParameter("IDSite", iDSite) :
                new ObjectParameter("IDSite", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var postCodeParameter = postCode != null ?
                new ObjectParameter("PostCode", postCode) :
                new ObjectParameter("PostCode", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("telephone", telephone) :
                new ObjectParameter("telephone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var pICParameter = pIC != null ?
                new ObjectParameter("PIC", pIC) :
                new ObjectParameter("PIC", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            var discontinueParameter = discontinue.HasValue ?
                new ObjectParameter("Discontinue", discontinue) :
                new ObjectParameter("Discontinue", typeof(bool));
    
            var siteLogoParameter = siteLogo != null ?
                new ObjectParameter("SiteLogo", siteLogo) :
                new ObjectParameter("SiteLogo", typeof(string));
    
            var iDTimeZoneParameter = iDTimeZone.HasValue ?
                new ObjectParameter("IDTimeZone", iDTimeZone) :
                new ObjectParameter("IDTimeZone", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTSiteUpdate_Result>("PTSiteUpdate", iDSiteParameter, siteNameParameter, addressParameter, postCodeParameter, telephoneParameter, faxParameter, emailParameter, pICParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter, discontinueParameter, siteLogoParameter, iDTimeZoneParameter);
        }
    
        public virtual ObjectResult<PTSiteDelete_Result> PTSiteDelete(string iDSite, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iDSiteParameter = iDSite != null ?
                new ObjectParameter("IDSite", iDSite) :
                new ObjectParameter("IDSite", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTSiteDelete_Result>("PTSiteDelete", iDSiteParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTSiteSelectByKeywordDiscontinue_Result> PTSiteSelectByKeywordDiscontinue(string siteNameKeyword, Nullable<bool> discontinue, string orderBy, string direction)
        {
            var siteNameKeywordParameter = siteNameKeyword != null ?
                new ObjectParameter("SiteNameKeyword", siteNameKeyword) :
                new ObjectParameter("SiteNameKeyword", typeof(string));
    
            var discontinueParameter = discontinue.HasValue ?
                new ObjectParameter("Discontinue", discontinue) :
                new ObjectParameter("Discontinue", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTSiteSelectByKeywordDiscontinue_Result>("PTSiteSelectByKeywordDiscontinue", siteNameKeywordParameter, discontinueParameter, orderByParameter, directionParameter);
        }
    
        public virtual ObjectResult<PTSiteSelect_Result> PTSiteSelect(string siteNameKeyword, Nullable<bool> discontinue, string orderBy, string direction, Nullable<int> limit, Nullable<int> offSet)
        {
            var siteNameKeywordParameter = siteNameKeyword != null ?
                new ObjectParameter("SiteNameKeyword", siteNameKeyword) :
                new ObjectParameter("SiteNameKeyword", typeof(string));
    
            var discontinueParameter = discontinue.HasValue ?
                new ObjectParameter("Discontinue", discontinue) :
                new ObjectParameter("Discontinue", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var offSetParameter = offSet.HasValue ?
                new ObjectParameter("OffSet", offSet) :
                new ObjectParameter("OffSet", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTSiteSelect_Result>("PTSiteSelect", siteNameKeywordParameter, discontinueParameter, orderByParameter, directionParameter, limitParameter, offSetParameter);
        }
    
        public virtual ObjectResult<PTSiteSelectByID_Result> PTSiteSelectByID(string iDSite)
        {
            var iDSiteParameter = iDSite != null ?
                new ObjectParameter("IDSite", iDSite) :
                new ObjectParameter("IDSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTSiteSelectByID_Result>("PTSiteSelectByID", iDSiteParameter);
        }
    
        public virtual ObjectResult<PTSiteUserSelectByIDSite_Result> PTSiteUserSelectByIDSite(string iDSite)
        {
            var iDSiteParameter = iDSite != null ?
                new ObjectParameter("IDSite", iDSite) :
                new ObjectParameter("IDSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTSiteUserSelectByIDSite_Result>("PTSiteUserSelectByIDSite", iDSiteParameter);
        }
    
        public virtual ObjectResult<PTSiteUserSelectByIDUser_Result> PTSiteUserSelectByIDUser(string iDUser)
        {
            var iDUserParameter = iDUser != null ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTSiteUserSelectByIDUser_Result>("PTSiteUserSelectByIDUser", iDUserParameter);
        }
    
        public virtual ObjectResult<PTSiteSelectAll_Result> PTSiteSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTSiteSelectAll_Result>("PTSiteSelectAll");
        }
    
        public virtual ObjectResult<PTLanguageSelectAll_Result> PTLanguageSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTLanguageSelectAll_Result>("PTLanguageSelectAll");
        }
    
        public virtual ObjectResult<PTLanguageSelectByID_Result> PTLanguageSelectByID(string iDLanguage)
        {
            var iDLanguageParameter = iDLanguage != null ?
                new ObjectParameter("IDLanguage", iDLanguage) :
                new ObjectParameter("IDLanguage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTLanguageSelectByID_Result>("PTLanguageSelectByID", iDLanguageParameter);
        }
    
        public virtual ObjectResult<PTFeatureLanguageSelect_Result> PTFeatureLanguageSelect(string iDLanguage, string keyword, string orderBy, string direction, Nullable<int> limit, Nullable<int> offSet)
        {
            var iDLanguageParameter = iDLanguage != null ?
                new ObjectParameter("IDLanguage", iDLanguage) :
                new ObjectParameter("IDLanguage", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var offSetParameter = offSet.HasValue ?
                new ObjectParameter("OffSet", offSet) :
                new ObjectParameter("OffSet", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTFeatureLanguageSelect_Result>("PTFeatureLanguageSelect", iDLanguageParameter, keywordParameter, orderByParameter, directionParameter, limitParameter, offSetParameter);
        }
    
        public virtual ObjectResult<PTModuleLanguageSelect_Result> PTModuleLanguageSelect(string iDLanguage, string keyword, string orderBy, string direction, Nullable<int> limit, Nullable<int> offSet)
        {
            var iDLanguageParameter = iDLanguage != null ?
                new ObjectParameter("IDLanguage", iDLanguage) :
                new ObjectParameter("IDLanguage", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var offSetParameter = offSet.HasValue ?
                new ObjectParameter("OffSet", offSet) :
                new ObjectParameter("OffSet", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTModuleLanguageSelect_Result>("PTModuleLanguageSelect", iDLanguageParameter, keywordParameter, orderByParameter, directionParameter, limitParameter, offSetParameter);
        }
    
        public virtual ObjectResult<PTShortcutLanguageSelect_Result> PTShortcutLanguageSelect(string iDLanguage, string keyword, string orderBy, string direction, Nullable<int> limit, Nullable<int> offSet)
        {
            var iDLanguageParameter = iDLanguage != null ?
                new ObjectParameter("IDLanguage", iDLanguage) :
                new ObjectParameter("IDLanguage", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var offSetParameter = offSet.HasValue ?
                new ObjectParameter("OffSet", offSet) :
                new ObjectParameter("OffSet", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTShortcutLanguageSelect_Result>("PTShortcutLanguageSelect", iDLanguageParameter, keywordParameter, orderByParameter, directionParameter, limitParameter, offSetParameter);
        }
    
        public virtual ObjectResult<PTSiteUserSave_Result> PTSiteUserSave(string iDSite, string valueList, string userEntry, Nullable<System.DateTime> dateEntry, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iDSiteParameter = iDSite != null ?
                new ObjectParameter("IDSite", iDSite) :
                new ObjectParameter("IDSite", typeof(string));
    
            var valueListParameter = valueList != null ?
                new ObjectParameter("ValueList", valueList) :
                new ObjectParameter("ValueList", typeof(string));
    
            var userEntryParameter = userEntry != null ?
                new ObjectParameter("UserEntry", userEntry) :
                new ObjectParameter("UserEntry", typeof(string));
    
            var dateEntryParameter = dateEntry.HasValue ?
                new ObjectParameter("DateEntry", dateEntry) :
                new ObjectParameter("DateEntry", typeof(System.DateTime));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTSiteUserSave_Result>("PTSiteUserSave", iDSiteParameter, valueListParameter, userEntryParameter, dateEntryParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTModuleFeaturesSelectAll_Result> PTModuleFeaturesSelectAll(string iDRole, string iDSite)
        {
            var iDRoleParameter = iDRole != null ?
                new ObjectParameter("IDRole", iDRole) :
                new ObjectParameter("IDRole", typeof(string));
    
            var iDSiteParameter = iDSite != null ?
                new ObjectParameter("IDSite", iDSite) :
                new ObjectParameter("IDSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTModuleFeaturesSelectAll_Result>("PTModuleFeaturesSelectAll", iDRoleParameter, iDSiteParameter);
        }
    
        public virtual ObjectResult<PModuleFeatureToMenuTree_Result> PModuleFeatureToMenuTree(string iDRole, string iDSite, string iDLanguage)
        {
            var iDRoleParameter = iDRole != null ?
                new ObjectParameter("IDRole", iDRole) :
                new ObjectParameter("IDRole", typeof(string));
    
            var iDSiteParameter = iDSite != null ?
                new ObjectParameter("IDSite", iDSite) :
                new ObjectParameter("IDSite", typeof(string));
    
            var iDLanguageParameter = iDLanguage != null ?
                new ObjectParameter("IDLanguage", iDLanguage) :
                new ObjectParameter("IDLanguage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PModuleFeatureToMenuTree_Result>("PModuleFeatureToMenuTree", iDRoleParameter, iDSiteParameter, iDLanguageParameter);
        }
    
        public virtual ObjectResult<PTModuleInsert_Result> PTModuleInsert(string moduleCode, string moduleName, string moduleDesc, string userEntry, Nullable<System.DateTime> dateEntry, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance, Nullable<int> sequence, Nullable<bool> isDefault, string iDIcon)
        {
            var moduleCodeParameter = moduleCode != null ?
                new ObjectParameter("ModuleCode", moduleCode) :
                new ObjectParameter("ModuleCode", typeof(string));
    
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var moduleDescParameter = moduleDesc != null ?
                new ObjectParameter("ModuleDesc", moduleDesc) :
                new ObjectParameter("ModuleDesc", typeof(string));
    
            var userEntryParameter = userEntry != null ?
                new ObjectParameter("UserEntry", userEntry) :
                new ObjectParameter("UserEntry", typeof(string));
    
            var dateEntryParameter = dateEntry.HasValue ?
                new ObjectParameter("DateEntry", dateEntry) :
                new ObjectParameter("DateEntry", typeof(System.DateTime));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var iDIconParameter = iDIcon != null ?
                new ObjectParameter("IDIcon", iDIcon) :
                new ObjectParameter("IDIcon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTModuleInsert_Result>("PTModuleInsert", moduleCodeParameter, moduleNameParameter, moduleDescParameter, userEntryParameter, dateEntryParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter, sequenceParameter, isDefaultParameter, iDIconParameter);
        }
    
        public virtual ObjectResult<PTModuleUpdate_Result> PTModuleUpdate(string iDModule, string moduleCode, string moduleName, string moduleDesc, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance, Nullable<int> sequence, Nullable<bool> isDefault, string iDIcon)
        {
            var iDModuleParameter = iDModule != null ?
                new ObjectParameter("IDModule", iDModule) :
                new ObjectParameter("IDModule", typeof(string));
    
            var moduleCodeParameter = moduleCode != null ?
                new ObjectParameter("ModuleCode", moduleCode) :
                new ObjectParameter("ModuleCode", typeof(string));
    
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var moduleDescParameter = moduleDesc != null ?
                new ObjectParameter("ModuleDesc", moduleDesc) :
                new ObjectParameter("ModuleDesc", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var iDIconParameter = iDIcon != null ?
                new ObjectParameter("IDIcon", iDIcon) :
                new ObjectParameter("IDIcon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTModuleUpdate_Result>("PTModuleUpdate", iDModuleParameter, moduleCodeParameter, moduleNameParameter, moduleDescParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter, sequenceParameter, isDefaultParameter, iDIconParameter);
        }
    
        public virtual ObjectResult<PTModuleUpdateSequence_Result> PTModuleUpdateSequence(string iDModule, string direction)
        {
            var iDModuleParameter = iDModule != null ?
                new ObjectParameter("IDModule", iDModule) :
                new ObjectParameter("IDModule", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTModuleUpdateSequence_Result>("PTModuleUpdateSequence", iDModuleParameter, directionParameter);
        }
    
        public virtual ObjectResult<PTModuleDelete_Result> PTModuleDelete(string iDModule, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iDModuleParameter = iDModule != null ?
                new ObjectParameter("IDModule", iDModule) :
                new ObjectParameter("IDModule", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTModuleDelete_Result>("PTModuleDelete", iDModuleParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTModuleSelect_Result> PTModuleSelect(string orderBy, string direction, Nullable<int> limit, Nullable<int> offSet)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var offSetParameter = offSet.HasValue ?
                new ObjectParameter("OffSet", offSet) :
                new ObjectParameter("OffSet", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTModuleSelect_Result>("PTModuleSelect", orderByParameter, directionParameter, limitParameter, offSetParameter);
        }
    
        public virtual ObjectResult<PTModuleSelectByID_Result> PTModuleSelectByID(string iDModule)
        {
            var iDModuleParameter = iDModule != null ?
                new ObjectParameter("IDModule", iDModule) :
                new ObjectParameter("IDModule", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTModuleSelectByID_Result>("PTModuleSelectByID", iDModuleParameter);
        }
    
        public virtual ObjectResult<PTModuleSelectByKeyword_Result> PTModuleSelectByKeyword(string keyword, Nullable<int> limit, Nullable<int> offset)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTModuleSelectByKeyword_Result>("PTModuleSelectByKeyword", keywordParameter, limitParameter, offsetParameter);
        }
    
        public virtual ObjectResult<PTIconSelectLov_Result> PTIconSelectLov(string orderBy, string direction, string keyword, Nullable<int> limit, Nullable<int> offset)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTIconSelectLov_Result>("PTIconSelectLov", orderByParameter, directionParameter, keywordParameter, limitParameter, offsetParameter);
        }
    
        public virtual ObjectResult<PTIconSelectLovByKeyword_Result> PTIconSelectLovByKeyword(string orderBy, string direction, string keyword)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTIconSelectLovByKeyword_Result>("PTIconSelectLovByKeyword", orderByParameter, directionParameter, keywordParameter);
        }
    
        public virtual ObjectResult<PTIconSelectByKeyword_Result> PTIconSelectByKeyword(string orderBy, string direction, string keyword)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTIconSelectByKeyword_Result>("PTIconSelectByKeyword", orderByParameter, directionParameter, keywordParameter);
        }
    
        public virtual ObjectResult<PTIconSelectByKeywordIsDefault_Result> PTIconSelectByKeywordIsDefault(string orderBy, string direction, string keyword, Nullable<bool> isDefault, Nullable<int> limit, Nullable<int> offset)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTIconSelectByKeywordIsDefault_Result>("PTIconSelectByKeywordIsDefault", orderByParameter, directionParameter, keywordParameter, isDefaultParameter, limitParameter, offsetParameter);
        }
    
        public virtual ObjectResult<PTIconSelectByID_Result> PTIconSelectByID(string iDIcon)
        {
            var iDIconParameter = iDIcon != null ?
                new ObjectParameter("IDIcon", iDIcon) :
                new ObjectParameter("IDIcon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTIconSelectByID_Result>("PTIconSelectByID", iDIconParameter);
        }
    
        public virtual ObjectResult<PTIconInsert_Result> PTIconInsert(string iconName, string iconDesc, string iconClass, string iconType, string iconPath, string iconCategory, Nullable<bool> isDefault, string userEntry, Nullable<System.DateTime> dateEntry, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iconNameParameter = iconName != null ?
                new ObjectParameter("IconName", iconName) :
                new ObjectParameter("IconName", typeof(string));
    
            var iconDescParameter = iconDesc != null ?
                new ObjectParameter("IconDesc", iconDesc) :
                new ObjectParameter("IconDesc", typeof(string));
    
            var iconClassParameter = iconClass != null ?
                new ObjectParameter("IconClass", iconClass) :
                new ObjectParameter("IconClass", typeof(string));
    
            var iconTypeParameter = iconType != null ?
                new ObjectParameter("IconType", iconType) :
                new ObjectParameter("IconType", typeof(string));
    
            var iconPathParameter = iconPath != null ?
                new ObjectParameter("IconPath", iconPath) :
                new ObjectParameter("IconPath", typeof(string));
    
            var iconCategoryParameter = iconCategory != null ?
                new ObjectParameter("IconCategory", iconCategory) :
                new ObjectParameter("IconCategory", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("isDefault", isDefault) :
                new ObjectParameter("isDefault", typeof(bool));
    
            var userEntryParameter = userEntry != null ?
                new ObjectParameter("UserEntry", userEntry) :
                new ObjectParameter("UserEntry", typeof(string));
    
            var dateEntryParameter = dateEntry.HasValue ?
                new ObjectParameter("DateEntry", dateEntry) :
                new ObjectParameter("DateEntry", typeof(System.DateTime));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTIconInsert_Result>("PTIconInsert", iconNameParameter, iconDescParameter, iconClassParameter, iconTypeParameter, iconPathParameter, iconCategoryParameter, isDefaultParameter, userEntryParameter, dateEntryParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTIconDelete_Result> PTIconDelete(string iDIcon, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iDIconParameter = iDIcon != null ?
                new ObjectParameter("IDIcon", iDIcon) :
                new ObjectParameter("IDIcon", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTIconDelete_Result>("PTIconDelete", iDIconParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTIconUpdate_Result> PTIconUpdate(string iDIcon, string iconName, string iconDesc, string iconClass, string iconType, string iconPath, string iconCategory, Nullable<bool> isDefault, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iDIconParameter = iDIcon != null ?
                new ObjectParameter("IDIcon", iDIcon) :
                new ObjectParameter("IDIcon", typeof(string));
    
            var iconNameParameter = iconName != null ?
                new ObjectParameter("IconName", iconName) :
                new ObjectParameter("IconName", typeof(string));
    
            var iconDescParameter = iconDesc != null ?
                new ObjectParameter("IconDesc", iconDesc) :
                new ObjectParameter("IconDesc", typeof(string));
    
            var iconClassParameter = iconClass != null ?
                new ObjectParameter("IconClass", iconClass) :
                new ObjectParameter("IconClass", typeof(string));
    
            var iconTypeParameter = iconType != null ?
                new ObjectParameter("IconType", iconType) :
                new ObjectParameter("IconType", typeof(string));
    
            var iconPathParameter = iconPath != null ?
                new ObjectParameter("IconPath", iconPath) :
                new ObjectParameter("IconPath", typeof(string));
    
            var iconCategoryParameter = iconCategory != null ?
                new ObjectParameter("IconCategory", iconCategory) :
                new ObjectParameter("IconCategory", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("isDefault", isDefault) :
                new ObjectParameter("isDefault", typeof(bool));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTIconUpdate_Result>("PTIconUpdate", iDIconParameter, iconNameParameter, iconDescParameter, iconClassParameter, iconTypeParameter, iconPathParameter, iconCategoryParameter, isDefaultParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTFeatureInsert_Result> PTFeatureInsert(string iDModule, string featuresCode, string featuresName, string featuresDesc, string featuresType, string featuresAction, Nullable<bool> isExternal, string pathApp, string userEntry, Nullable<System.DateTime> dateEntry, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance, string iDIcon)
        {
            var iDModuleParameter = iDModule != null ?
                new ObjectParameter("IDModule", iDModule) :
                new ObjectParameter("IDModule", typeof(string));
    
            var featuresCodeParameter = featuresCode != null ?
                new ObjectParameter("FeaturesCode", featuresCode) :
                new ObjectParameter("FeaturesCode", typeof(string));
    
            var featuresNameParameter = featuresName != null ?
                new ObjectParameter("FeaturesName", featuresName) :
                new ObjectParameter("FeaturesName", typeof(string));
    
            var featuresDescParameter = featuresDesc != null ?
                new ObjectParameter("FeaturesDesc", featuresDesc) :
                new ObjectParameter("FeaturesDesc", typeof(string));
    
            var featuresTypeParameter = featuresType != null ?
                new ObjectParameter("FeaturesType", featuresType) :
                new ObjectParameter("FeaturesType", typeof(string));
    
            var featuresActionParameter = featuresAction != null ?
                new ObjectParameter("FeaturesAction", featuresAction) :
                new ObjectParameter("FeaturesAction", typeof(string));
    
            var isExternalParameter = isExternal.HasValue ?
                new ObjectParameter("IsExternal", isExternal) :
                new ObjectParameter("IsExternal", typeof(bool));
    
            var pathAppParameter = pathApp != null ?
                new ObjectParameter("PathApp", pathApp) :
                new ObjectParameter("PathApp", typeof(string));
    
            var userEntryParameter = userEntry != null ?
                new ObjectParameter("UserEntry", userEntry) :
                new ObjectParameter("UserEntry", typeof(string));
    
            var dateEntryParameter = dateEntry.HasValue ?
                new ObjectParameter("DateEntry", dateEntry) :
                new ObjectParameter("DateEntry", typeof(System.DateTime));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            var iDIconParameter = iDIcon != null ?
                new ObjectParameter("IDIcon", iDIcon) :
                new ObjectParameter("IDIcon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTFeatureInsert_Result>("PTFeatureInsert", iDModuleParameter, featuresCodeParameter, featuresNameParameter, featuresDescParameter, featuresTypeParameter, featuresActionParameter, isExternalParameter, pathAppParameter, userEntryParameter, dateEntryParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter, iDIconParameter);
        }
    
        public virtual ObjectResult<PTFeatureUpdate_Result> PTFeatureUpdate(string iDFeature, string featuresCode, string featuresName, string featuresDesc, string featuresType, string featuresAction, Nullable<bool> isExternal, string pathApp, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance, string iDIcon)
        {
            var iDFeatureParameter = iDFeature != null ?
                new ObjectParameter("IDFeature", iDFeature) :
                new ObjectParameter("IDFeature", typeof(string));
    
            var featuresCodeParameter = featuresCode != null ?
                new ObjectParameter("FeaturesCode", featuresCode) :
                new ObjectParameter("FeaturesCode", typeof(string));
    
            var featuresNameParameter = featuresName != null ?
                new ObjectParameter("FeaturesName", featuresName) :
                new ObjectParameter("FeaturesName", typeof(string));
    
            var featuresDescParameter = featuresDesc != null ?
                new ObjectParameter("FeaturesDesc", featuresDesc) :
                new ObjectParameter("FeaturesDesc", typeof(string));
    
            var featuresTypeParameter = featuresType != null ?
                new ObjectParameter("FeaturesType", featuresType) :
                new ObjectParameter("FeaturesType", typeof(string));
    
            var featuresActionParameter = featuresAction != null ?
                new ObjectParameter("FeaturesAction", featuresAction) :
                new ObjectParameter("FeaturesAction", typeof(string));
    
            var isExternalParameter = isExternal.HasValue ?
                new ObjectParameter("IsExternal", isExternal) :
                new ObjectParameter("IsExternal", typeof(bool));
    
            var pathAppParameter = pathApp != null ?
                new ObjectParameter("PathApp", pathApp) :
                new ObjectParameter("PathApp", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            var iDIconParameter = iDIcon != null ?
                new ObjectParameter("IDIcon", iDIcon) :
                new ObjectParameter("IDIcon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTFeatureUpdate_Result>("PTFeatureUpdate", iDFeatureParameter, featuresCodeParameter, featuresNameParameter, featuresDescParameter, featuresTypeParameter, featuresActionParameter, isExternalParameter, pathAppParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter, iDIconParameter);
        }
    
        public virtual ObjectResult<PTFeatureUpdateSequence_Result> PTFeatureUpdateSequence(string iDModule, string iDFeature, string direction, string featureType)
        {
            var iDModuleParameter = iDModule != null ?
                new ObjectParameter("IDModule", iDModule) :
                new ObjectParameter("IDModule", typeof(string));
    
            var iDFeatureParameter = iDFeature != null ?
                new ObjectParameter("IDFeature", iDFeature) :
                new ObjectParameter("IDFeature", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var featureTypeParameter = featureType != null ?
                new ObjectParameter("FeatureType", featureType) :
                new ObjectParameter("FeatureType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTFeatureUpdateSequence_Result>("PTFeatureUpdateSequence", iDModuleParameter, iDFeatureParameter, directionParameter, featureTypeParameter);
        }
    
        public virtual ObjectResult<PTFeatureDelete_Result> PTFeatureDelete(string iDModule, string iDFeature, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iDModuleParameter = iDModule != null ?
                new ObjectParameter("IDModule", iDModule) :
                new ObjectParameter("IDModule", typeof(string));
    
            var iDFeatureParameter = iDFeature != null ?
                new ObjectParameter("IDFeature", iDFeature) :
                new ObjectParameter("IDFeature", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTFeatureDelete_Result>("PTFeatureDelete", iDModuleParameter, iDFeatureParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTFeatureMove_Result> PTFeatureMove(string iDFeature, string iDModule, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iDFeatureParameter = iDFeature != null ?
                new ObjectParameter("IDFeature", iDFeature) :
                new ObjectParameter("IDFeature", typeof(string));
    
            var iDModuleParameter = iDModule != null ?
                new ObjectParameter("IDModule", iDModule) :
                new ObjectParameter("IDModule", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTFeatureMove_Result>("PTFeatureMove", iDFeatureParameter, iDModuleParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTFeatureDuplicate_Result> PTFeatureDuplicate(string iDModule, string iDFeature, string userEntry, Nullable<System.DateTime> dateEntry, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iDModuleParameter = iDModule != null ?
                new ObjectParameter("IDModule", iDModule) :
                new ObjectParameter("IDModule", typeof(string));
    
            var iDFeatureParameter = iDFeature != null ?
                new ObjectParameter("IDFeature", iDFeature) :
                new ObjectParameter("IDFeature", typeof(string));
    
            var userEntryParameter = userEntry != null ?
                new ObjectParameter("UserEntry", userEntry) :
                new ObjectParameter("UserEntry", typeof(string));
    
            var dateEntryParameter = dateEntry.HasValue ?
                new ObjectParameter("DateEntry", dateEntry) :
                new ObjectParameter("DateEntry", typeof(System.DateTime));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTFeatureDuplicate_Result>("PTFeatureDuplicate", iDModuleParameter, iDFeatureParameter, userEntryParameter, dateEntryParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTFeatureSelectByID_Result> PTFeatureSelectByID(string iDFeature)
        {
            var iDFeatureParameter = iDFeature != null ?
                new ObjectParameter("IDFeature", iDFeature) :
                new ObjectParameter("IDFeature", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTFeatureSelectByID_Result>("PTFeatureSelectByID", iDFeatureParameter);
        }
    
        public virtual ObjectResult<PTFeatureSelectByIDFeatureIDModule_Result> PTFeatureSelectByIDFeatureIDModule(string iDFeature, string iDModule)
        {
            var iDFeatureParameter = iDFeature != null ?
                new ObjectParameter("IDFeature", iDFeature) :
                new ObjectParameter("IDFeature", typeof(string));
    
            var iDModuleParameter = iDModule != null ?
                new ObjectParameter("IDModule", iDModule) :
                new ObjectParameter("IDModule", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTFeatureSelectByIDFeatureIDModule_Result>("PTFeatureSelectByIDFeatureIDModule", iDFeatureParameter, iDModuleParameter);
        }
    
        public virtual ObjectResult<PTFeatureSelectByIDModule_Result> PTFeatureSelectByIDModule(string iDModule)
        {
            var iDModuleParameter = iDModule != null ?
                new ObjectParameter("IDModule", iDModule) :
                new ObjectParameter("IDModule", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTFeatureSelectByIDModule_Result>("PTFeatureSelectByIDModule", iDModuleParameter);
        }
    
        public virtual ObjectResult<PTRoleInsert_Result> PTRoleInsert(string roleName, string roleDesc, Nullable<bool> discontinue, string userEntry, Nullable<System.DateTime> dateEntry, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var roleDescParameter = roleDesc != null ?
                new ObjectParameter("RoleDesc", roleDesc) :
                new ObjectParameter("RoleDesc", typeof(string));
    
            var discontinueParameter = discontinue.HasValue ?
                new ObjectParameter("Discontinue", discontinue) :
                new ObjectParameter("Discontinue", typeof(bool));
    
            var userEntryParameter = userEntry != null ?
                new ObjectParameter("UserEntry", userEntry) :
                new ObjectParameter("UserEntry", typeof(string));
    
            var dateEntryParameter = dateEntry.HasValue ?
                new ObjectParameter("DateEntry", dateEntry) :
                new ObjectParameter("DateEntry", typeof(System.DateTime));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTRoleInsert_Result>("PTRoleInsert", roleNameParameter, roleDescParameter, discontinueParameter, userEntryParameter, dateEntryParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTRoleUpdate_Result> PTRoleUpdate(string iDRole, string roleName, string roleDesc, Nullable<bool> discontinue, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iDRoleParameter = iDRole != null ?
                new ObjectParameter("IDRole", iDRole) :
                new ObjectParameter("IDRole", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var roleDescParameter = roleDesc != null ?
                new ObjectParameter("RoleDesc", roleDesc) :
                new ObjectParameter("RoleDesc", typeof(string));
    
            var discontinueParameter = discontinue.HasValue ?
                new ObjectParameter("Discontinue", discontinue) :
                new ObjectParameter("Discontinue", typeof(bool));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTRoleUpdate_Result>("PTRoleUpdate", iDRoleParameter, roleNameParameter, roleDescParameter, discontinueParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTRoleDelete_Result> PTRoleDelete(string iDRole, string userLastMaintenance, Nullable<System.DateTime> dateLastMaintenance)
        {
            var iDRoleParameter = iDRole != null ?
                new ObjectParameter("IDRole", iDRole) :
                new ObjectParameter("IDRole", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance.HasValue ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTRoleDelete_Result>("PTRoleDelete", iDRoleParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<PTRoleSelectByID_Result> PTRoleSelectByID(string iDRole)
        {
            var iDRoleParameter = iDRole != null ?
                new ObjectParameter("IDRole", iDRole) :
                new ObjectParameter("IDRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTRoleSelectByID_Result>("PTRoleSelectByID", iDRoleParameter);
        }
    
        public virtual ObjectResult<PTRoleSelectByKeywordDiscontinue_Result> PTRoleSelectByKeywordDiscontinue(string orderBy, string direction, string keyword, Nullable<bool> discontinue, Nullable<int> limit, Nullable<int> offset)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var discontinueParameter = discontinue.HasValue ?
                new ObjectParameter("Discontinue", discontinue) :
                new ObjectParameter("Discontinue", typeof(bool));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PTRoleSelectByKeywordDiscontinue_Result>("PTRoleSelectByKeywordDiscontinue", orderByParameter, directionParameter, keywordParameter, discontinueParameter, limitParameter, offsetParameter);
        }
    
        public virtual ObjectResult<GetDataNotifications_Result> GetDataNotifications(string roleID, Nullable<int> offset, Nullable<int> limit)
        {
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataNotifications_Result>("GetDataNotifications", roleIDParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<TNotificationSelect_Result> TNotificationSelect(string role, Nullable<int> offset, Nullable<int> limit)
        {
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TNotificationSelect_Result>("TNotificationSelect", roleParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<GetDeviceCategory_Result> GetDeviceCategory(Nullable<int> offset, Nullable<int> limit, string keyword)
        {
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviceCategory_Result>("GetDeviceCategory", offsetParameter, limitParameter, keywordParameter);
        }
    
        public virtual ObjectResult<GetSite_Result> GetSite(Nullable<int> offset, Nullable<int> limit, string keyword)
        {
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSite_Result>("GetSite", offsetParameter, limitParameter, keywordParameter);
        }
    
        public virtual ObjectResult<InsertDevice_Result> InsertDevice(string device_Name, string device_category_ID, string device_Site_ID, string device_Description, string userEntry, string dateEntry, string userLastMaintenance, string dateLastMaintenance, string user, string macAdress1, string macAdress2, string macAdress3)
        {
            var device_NameParameter = device_Name != null ?
                new ObjectParameter("Device_Name", device_Name) :
                new ObjectParameter("Device_Name", typeof(string));
    
            var device_category_IDParameter = device_category_ID != null ?
                new ObjectParameter("Device_category_ID", device_category_ID) :
                new ObjectParameter("Device_category_ID", typeof(string));
    
            var device_Site_IDParameter = device_Site_ID != null ?
                new ObjectParameter("Device_Site_ID", device_Site_ID) :
                new ObjectParameter("Device_Site_ID", typeof(string));
    
            var device_DescriptionParameter = device_Description != null ?
                new ObjectParameter("Device_Description", device_Description) :
                new ObjectParameter("Device_Description", typeof(string));
    
            var userEntryParameter = userEntry != null ?
                new ObjectParameter("UserEntry", userEntry) :
                new ObjectParameter("UserEntry", typeof(string));
    
            var dateEntryParameter = dateEntry != null ?
                new ObjectParameter("DateEntry", dateEntry) :
                new ObjectParameter("DateEntry", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            var dateLastMaintenanceParameter = dateLastMaintenance != null ?
                new ObjectParameter("DateLastMaintenance", dateLastMaintenance) :
                new ObjectParameter("DateLastMaintenance", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var macAdress1Parameter = macAdress1 != null ?
                new ObjectParameter("MacAdress1", macAdress1) :
                new ObjectParameter("MacAdress1", typeof(string));
    
            var macAdress2Parameter = macAdress2 != null ?
                new ObjectParameter("MacAdress2", macAdress2) :
                new ObjectParameter("MacAdress2", typeof(string));
    
            var macAdress3Parameter = macAdress3 != null ?
                new ObjectParameter("MacAdress3", macAdress3) :
                new ObjectParameter("MacAdress3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertDevice_Result>("InsertDevice", device_NameParameter, device_category_IDParameter, device_Site_IDParameter, device_DescriptionParameter, userEntryParameter, dateEntryParameter, userLastMaintenanceParameter, dateLastMaintenanceParameter, userParameter, macAdress1Parameter, macAdress2Parameter, macAdress3Parameter);
        }
    
        public virtual ObjectResult<GetDeviceBySiteDatatable_Result> GetDeviceBySiteDatatable(string userID, Nullable<int> limit, Nullable<int> offset, string keyword)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviceBySiteDatatable_Result>("GetDeviceBySiteDatatable", userIDParameter, limitParameter, offsetParameter, keywordParameter);
        }
    
        public virtual ObjectResult<UpdateDevice_Result> UpdateDevice(string deviceID, string deviceName, string deviceCategoryID, string deviceSiteID, string mac1, string mac2, string mac3, string description, string userLastMaintenance)
        {
            var deviceIDParameter = deviceID != null ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var deviceCategoryIDParameter = deviceCategoryID != null ?
                new ObjectParameter("DeviceCategoryID", deviceCategoryID) :
                new ObjectParameter("DeviceCategoryID", typeof(string));
    
            var deviceSiteIDParameter = deviceSiteID != null ?
                new ObjectParameter("DeviceSiteID", deviceSiteID) :
                new ObjectParameter("DeviceSiteID", typeof(string));
    
            var mac1Parameter = mac1 != null ?
                new ObjectParameter("Mac1", mac1) :
                new ObjectParameter("Mac1", typeof(string));
    
            var mac2Parameter = mac2 != null ?
                new ObjectParameter("Mac2", mac2) :
                new ObjectParameter("Mac2", typeof(string));
    
            var mac3Parameter = mac3 != null ?
                new ObjectParameter("Mac3", mac3) :
                new ObjectParameter("Mac3", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userLastMaintenanceParameter = userLastMaintenance != null ?
                new ObjectParameter("UserLastMaintenance", userLastMaintenance) :
                new ObjectParameter("UserLastMaintenance", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateDevice_Result>("UpdateDevice", deviceIDParameter, deviceNameParameter, deviceCategoryIDParameter, deviceSiteIDParameter, mac1Parameter, mac2Parameter, mac3Parameter, descriptionParameter, userLastMaintenanceParameter);
        }
    
        public virtual ObjectResult<DeleteDevice_Result> DeleteDevice(string iDDevice)
        {
            var iDDeviceParameter = iDDevice != null ?
                new ObjectParameter("IDDevice", iDDevice) :
                new ObjectParameter("IDDevice", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteDevice_Result>("DeleteDevice", iDDeviceParameter);
        }
    
        public virtual ObjectResult<GetCategoryDatatable_Result> GetCategoryDatatable(Nullable<int> limit, Nullable<int> offset, string keyword)
        {
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoryDatatable_Result>("GetCategoryDatatable", limitParameter, offsetParameter, keywordParameter);
        }
    
        public virtual ObjectResult<InsertCategory_Result> InsertCategory(string id, string categoryName, string categoryDesc, string userID)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var categoryDescParameter = categoryDesc != null ?
                new ObjectParameter("CategoryDesc", categoryDesc) :
                new ObjectParameter("CategoryDesc", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertCategory_Result>("InsertCategory", idParameter, categoryNameParameter, categoryDescParameter, userIDParameter);
        }
    
        public virtual ObjectResult<DeleteCategory_Result> DeleteCategory(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteCategory_Result>("DeleteCategory", idParameter);
        }
    
        public virtual ObjectResult<createMainParameter_Result> createMainParameter(string paramcode, string paramname, string paamdesc, string category)
        {
            var paramcodeParameter = paramcode != null ?
                new ObjectParameter("paramcode", paramcode) :
                new ObjectParameter("paramcode", typeof(string));
    
            var paramnameParameter = paramname != null ?
                new ObjectParameter("paramname", paramname) :
                new ObjectParameter("paramname", typeof(string));
    
            var paamdescParameter = paamdesc != null ?
                new ObjectParameter("paamdesc", paamdesc) :
                new ObjectParameter("paamdesc", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<createMainParameter_Result>("createMainParameter", paramcodeParameter, paramnameParameter, paamdescParameter, categoryParameter);
        }
    
        public virtual ObjectResult<GetMainParam_Result> GetMainParam(Nullable<int> limit, Nullable<int> offset, string keyword)
        {
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMainParam_Result>("GetMainParam", limitParameter, offsetParameter, keywordParameter);
        }
    
        public virtual ObjectResult<CreateorEditSensor_Result> CreateorEditSensor(string idSensor, string idCategory, Nullable<decimal> lower, Nullable<decimal> upper, string user)
        {
            var idSensorParameter = idSensor != null ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(string));
    
            var idCategoryParameter = idCategory != null ?
                new ObjectParameter("idCategory", idCategory) :
                new ObjectParameter("idCategory", typeof(string));
    
            var lowerParameter = lower.HasValue ?
                new ObjectParameter("lower", lower) :
                new ObjectParameter("lower", typeof(decimal));
    
            var upperParameter = upper.HasValue ?
                new ObjectParameter("upper", upper) :
                new ObjectParameter("upper", typeof(decimal));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateorEditSensor_Result>("CreateorEditSensor", idSensorParameter, idCategoryParameter, lowerParameter, upperParameter, userParameter);
        }
    
        public virtual ObjectResult<GETSENSORDetail_Result> GETSENSORDetail(string idmainparam)
        {
            var idmainparamParameter = idmainparam != null ?
                new ObjectParameter("idmainparam", idmainparam) :
                new ObjectParameter("idmainparam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETSENSORDetail_Result>("GETSENSORDetail", idmainparamParameter);
        }
    
        public virtual ObjectResult<GetActionByDeviceID_Result> GetActionByDeviceID(string deviceID)
        {
            var deviceIDParameter = deviceID != null ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActionByDeviceID_Result>("GetActionByDeviceID", deviceIDParameter);
        }
    
        public virtual ObjectResult<GETSiteByRole_Result> GETSiteByRole(string user)
        {
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETSiteByRole_Result>("GETSiteByRole", userParameter);
        }
    
        public virtual ObjectResult<GetDeviceBySite_Result> GetDeviceBySite(string site, Nullable<int> limit, Nullable<int> offset, string keyword)
        {
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviceBySite_Result>("GetDeviceBySite", siteParameter, limitParameter, offsetParameter, keywordParameter);
        }
    
        public virtual ObjectResult<GetAllChart_Result> GetAllChart(string deviceID)
        {
            var deviceIDParameter = deviceID != null ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllChart_Result>("GetAllChart", deviceIDParameter);
        }
    
        public virtual ObjectResult<GetDeviceChartByID_Result> GetDeviceChartByID(string deviceID)
        {
            var deviceIDParameter = deviceID != null ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviceChartByID_Result>("GetDeviceChartByID", deviceIDParameter);
        }
    
        public virtual ObjectResult<GetRoleDatatable_Result> GetRoleDatatable(Nullable<int> offset, Nullable<int> limit, string keyword)
        {
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoleDatatable_Result>("GetRoleDatatable", offsetParameter, limitParameter, keywordParameter);
        }
    
        public virtual ObjectResult<GetuserNew_Result> GetuserNew(Nullable<int> offset, Nullable<int> limit, string keyword)
        {
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetuserNew_Result>("GetuserNew", offsetParameter, limitParameter, keywordParameter);
        }
    
        public virtual ObjectResult<UpdateStatusLocked_Result> UpdateStatusLocked(string iduser, Nullable<int> type, string userupdateby)
        {
            var iduserParameter = iduser != null ?
                new ObjectParameter("iduser", iduser) :
                new ObjectParameter("iduser", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var userupdatebyParameter = userupdateby != null ?
                new ObjectParameter("userupdateby", userupdateby) :
                new ObjectParameter("userupdateby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateStatusLocked_Result>("UpdateStatusLocked", iduserParameter, typeParameter, userupdatebyParameter);
        }
    
        public virtual ObjectResult<string> InsertToLogTemp(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, string pathServer, string userID)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var pathServerParameter = pathServer != null ?
                new ObjectParameter("pathServer", pathServer) :
                new ObjectParameter("pathServer", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertToLogTemp", startdateParameter, enddateParameter, pathServerParameter, userIDParameter);
        }
    }
}
